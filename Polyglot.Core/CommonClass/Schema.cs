// Author: Igor compiler
// Compiler version: igorc 1.5.0
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace Igor.Schema
{
    public enum DescriptorKind
    {
        Bool = 1,
        Int = 2,
        Float = 3,
        String = 4,
        Binary = 5,
        List = 6,
        Dict = 7,
        Enum = 8,
        Record = 9,
        Key = 10,
        Localized = 11,
        Datetime = 12,
        Json = 13,
        Custom = 14,
        GenericInstance = 15,
        GenericArgument = 16,
    }

    public enum ViewMode
    {
        Edit = 1,
        Hidden = 2,
        Readonly = 3,
    }

    public enum CustomTypeKind
    {
        Record = 1,
        Variant = 2,
        Enum = 3,
    }

    public sealed class DescriptorKindJsonSerializer : Json.Serialization.IJsonSerializer<DescriptorKind>, Json.Serialization.IJsonKeySerializer<DescriptorKind>
    {
        public static readonly DescriptorKindJsonSerializer Instance = new DescriptorKindJsonSerializer();

        public Json.ImmutableJson Serialize(DescriptorKind value)
        {
            return SerializeKey(value);
        }

        public DescriptorKind Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(DescriptorKind value)
        {
            switch (value)
            {
                case DescriptorKind.Bool: return "bool";
                case DescriptorKind.Int: return "int";
                case DescriptorKind.Float: return "float";
                case DescriptorKind.String: return "string";
                case DescriptorKind.Binary: return "binary";
                case DescriptorKind.List: return "list";
                case DescriptorKind.Dict: return "dict";
                case DescriptorKind.Enum: return "enum";
                case DescriptorKind.Record: return "record";
                case DescriptorKind.Key: return "key";
                case DescriptorKind.Localized: return "localized";
                case DescriptorKind.Datetime: return "datetime";
                case DescriptorKind.Json: return "json";
                case DescriptorKind.Custom: return "custom";
                case DescriptorKind.GenericInstance: return "generic_instance";
                case DescriptorKind.GenericArgument: return "generic_argument";
                default: throw new System.ArgumentException("value");
            }
        }

        public DescriptorKind DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "bool": return DescriptorKind.Bool;
                case "int": return DescriptorKind.Int;
                case "float": return DescriptorKind.Float;
                case "string": return DescriptorKind.String;
                case "binary": return DescriptorKind.Binary;
                case "list": return DescriptorKind.List;
                case "dict": return DescriptorKind.Dict;
                case "enum": return DescriptorKind.Enum;
                case "record": return DescriptorKind.Record;
                case "key": return DescriptorKind.Key;
                case "localized": return DescriptorKind.Localized;
                case "datetime": return DescriptorKind.Datetime;
                case "json": return DescriptorKind.Json;
                case "custom": return DescriptorKind.Custom;
                case "generic_instance": return DescriptorKind.GenericInstance;
                case "generic_argument": return DescriptorKind.GenericArgument;
                default: throw new System.ArgumentException("jsonKey");
            }
        }
    }

    public sealed class ViewModeJsonSerializer : Json.Serialization.IJsonSerializer<ViewMode>, Json.Serialization.IJsonKeySerializer<ViewMode>
    {
        public static readonly ViewModeJsonSerializer Instance = new ViewModeJsonSerializer();

        public Json.ImmutableJson Serialize(ViewMode value)
        {
            return SerializeKey(value);
        }

        public ViewMode Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ViewMode value)
        {
            switch (value)
            {
                case ViewMode.Edit: return "edit";
                case ViewMode.Hidden: return "hidden";
                case ViewMode.Readonly: return "readonly";
                default: throw new System.ArgumentException("value");
            }
        }

        public ViewMode DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "edit": return ViewMode.Edit;
                case "hidden": return ViewMode.Hidden;
                case "readonly": return ViewMode.Readonly;
                default: throw new System.ArgumentException("jsonKey");
            }
        }
    }

    public abstract class Descriptor
    {
        public abstract DescriptorKind Kind { get; }
        public bool Optional { get; set; }
        public ViewMode Mode { get; set; }
        public string Help { get; set; }
        public string EditorKey { get; set; }

        protected Descriptor()
        {
            Optional = false;
            Mode = ViewMode.Edit;
        }
    }

    public sealed class DescriptorJsonSerializer : Json.Serialization.IJsonSerializer<Descriptor>
    {
        public static readonly DescriptorJsonSerializer Instance = new DescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(Descriptor value)
        {
            switch (value.Kind)
            {
                case DescriptorKind.Bool:
                    return BoolDescriptorJsonSerializer.Instance.Serialize((BoolDescriptor)value);
                case DescriptorKind.Int:
                    return IntDescriptorJsonSerializer.Instance.Serialize((IntDescriptor)value);
                case DescriptorKind.Float:
                    return FloatDescriptorJsonSerializer.Instance.Serialize((FloatDescriptor)value);
                case DescriptorKind.String:
                    return StringDescriptorJsonSerializer.Instance.Serialize((StringDescriptor)value);
                case DescriptorKind.Binary:
                    return BinaryDescriptorJsonSerializer.Instance.Serialize((BinaryDescriptor)value);
                case DescriptorKind.List:
                    return ListDescriptorJsonSerializer.Instance.Serialize((ListDescriptor)value);
                case DescriptorKind.Dict:
                    return DictDescriptorJsonSerializer.Instance.Serialize((DictDescriptor)value);
                case DescriptorKind.Enum:
                    return EnumDescriptorJsonSerializer.Instance.Serialize((EnumDescriptor)value);
                case DescriptorKind.Record:
                    return RecordDescriptorJsonSerializer.Instance.Serialize((RecordDescriptor)value);
                case DescriptorKind.Key:
                    return KeyDescriptorJsonSerializer.Instance.Serialize((KeyDescriptor)value);
                case DescriptorKind.Localized:
                    return LocalizedDescriptorJsonSerializer.Instance.Serialize((LocalizedDescriptor)value);
                case DescriptorKind.Datetime:
                    return DateTimeDescriptorJsonSerializer.Instance.Serialize((DateTimeDescriptor)value);
                case DescriptorKind.Json:
                    return JsonDescriptorJsonSerializer.Instance.Serialize((JsonDescriptor)value);
                case DescriptorKind.Custom:
                    return CustomDescriptorJsonSerializer.Instance.Serialize((CustomDescriptor)value);
                case DescriptorKind.GenericInstance:
                    return GenericInstanceDescriptorJsonSerializer.Instance.Serialize((GenericInstanceDescriptor)value);
                case DescriptorKind.GenericArgument:
                    return GenericArgumentDescriptorJsonSerializer.Instance.Serialize((GenericArgumentDescriptor)value);

                default:
                    throw new System.ArgumentOutOfRangeException("kind", value.Kind, "Invalid variant tag");
            }
        }

        public Descriptor Deserialize(Json.ImmutableJson json)
        {
            DescriptorKind kind = DescriptorKindJsonSerializer.Instance.Deserialize(json["kind"]);
            switch (kind)
            {
                case DescriptorKind.Bool:
                    return BoolDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Int:
                    return IntDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Float:
                    return FloatDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.String:
                    return StringDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Binary:
                    return BinaryDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.List:
                    return ListDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Dict:
                    return DictDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Enum:
                    return EnumDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Record:
                    return RecordDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Key:
                    return KeyDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Localized:
                    return LocalizedDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Datetime:
                    return DateTimeDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Json:
                    return JsonDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.Custom:
                    return CustomDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.GenericInstance:
                    return GenericInstanceDescriptorJsonSerializer.Instance.Deserialize(json);
                case DescriptorKind.GenericArgument:
                    return GenericArgumentDescriptorJsonSerializer.Instance.Deserialize(json);

                default:
                    throw new System.ArgumentOutOfRangeException("kind", kind, "Invalid variant tag");
            }
        }
    }

    public sealed class BoolDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Bool; }
        }

        public bool? Default { get; set; }

        public BoolDescriptor()
            : base()
        {
        }

        public BoolDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null, bool? @default = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Default = @default;
        }
    }

    public sealed class BoolDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<BoolDescriptor>
    {
        public static readonly BoolDescriptorJsonSerializer Instance = new BoolDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(BoolDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            if (value.Default.HasValue)
                json["default"] = JsonSerializer.Bool.Serialize(value.Default.Value);
            return json;
        }

        public BoolDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new BoolDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, BoolDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            Json.ImmutableJson jsonDefault;
            if (json.TryGetValue("default", out jsonDefault) && !jsonDefault.IsNull)
                value.Default = JsonSerializer.Bool.Deserialize(jsonDefault);
        }
    }

    public sealed class IntDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Int; }
        }

        public int? Default { get; set; }
        public int? Min { get; set; }
        public int? Max { get; set; }

        public IntDescriptor()
            : base()
        {
        }

        public IntDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null, int? @default = null, int? min = null, int? max = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Default = @default;
            this.Min = min;
            this.Max = max;
        }
    }

    public sealed class IntDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<IntDescriptor>
    {
        public static readonly IntDescriptorJsonSerializer Instance = new IntDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(IntDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            if (value.Default.HasValue)
                json["default"] = JsonSerializer.Int.Serialize(value.Default.Value);
            if (value.Min.HasValue)
                json["min"] = JsonSerializer.Int.Serialize(value.Min.Value);
            if (value.Max.HasValue)
                json["max"] = JsonSerializer.Int.Serialize(value.Max.Value);
            return json;
        }

        public IntDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new IntDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, IntDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            Json.ImmutableJson jsonDefault;
            if (json.TryGetValue("default", out jsonDefault) && !jsonDefault.IsNull)
                value.Default = JsonSerializer.Int.Deserialize(jsonDefault);
            Json.ImmutableJson jsonMin;
            if (json.TryGetValue("min", out jsonMin) && !jsonMin.IsNull)
                value.Min = JsonSerializer.Int.Deserialize(jsonMin);
            Json.ImmutableJson jsonMax;
            if (json.TryGetValue("max", out jsonMax) && !jsonMax.IsNull)
                value.Max = JsonSerializer.Int.Deserialize(jsonMax);
        }
    }

    public sealed class FloatDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Float; }
        }

        public double? Default { get; set; }
        public double? Min { get; set; }
        public double? Max { get; set; }

        public FloatDescriptor()
            : base()
        {
        }

        public FloatDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null, double? @default = null, double? min = null, double? max = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Default = @default;
            this.Min = min;
            this.Max = max;
        }
    }

    public sealed class FloatDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<FloatDescriptor>
    {
        public static readonly FloatDescriptorJsonSerializer Instance = new FloatDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(FloatDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            if (value.Default.HasValue)
                json["default"] = JsonSerializer.Double.Serialize(value.Default.Value);
            if (value.Min.HasValue)
                json["min"] = JsonSerializer.Double.Serialize(value.Min.Value);
            if (value.Max.HasValue)
                json["max"] = JsonSerializer.Double.Serialize(value.Max.Value);
            return json;
        }

        public FloatDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new FloatDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, FloatDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            Json.ImmutableJson jsonDefault;
            if (json.TryGetValue("default", out jsonDefault) && !jsonDefault.IsNull)
                value.Default = JsonSerializer.Double.Deserialize(jsonDefault);
            Json.ImmutableJson jsonMin;
            if (json.TryGetValue("min", out jsonMin) && !jsonMin.IsNull)
                value.Min = JsonSerializer.Double.Deserialize(jsonMin);
            Json.ImmutableJson jsonMax;
            if (json.TryGetValue("max", out jsonMax) && !jsonMax.IsNull)
                value.Max = JsonSerializer.Double.Deserialize(jsonMax);
        }
    }

    public sealed class StringDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.String; }
        }

        public string Default { get; set; }
        public bool Multiline { get; set; }
        public bool NotEmpty { get; set; }
        public string Source { get; set; }

        public StringDescriptor()
            : base()
        {
            Multiline = false;
            NotEmpty = false;
        }

        public StringDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null, string @default = null, bool multiline = false, bool notEmpty = false, string source = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Default = @default;
            this.Multiline = multiline;
            this.NotEmpty = notEmpty;
            this.Source = source;
        }
    }

    public sealed class StringDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<StringDescriptor>
    {
        public static readonly StringDescriptorJsonSerializer Instance = new StringDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(StringDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            if (value.Default != null)
                json["default"] = JsonSerializer.String.Serialize(value.Default);
            json["multiline"] = JsonSerializer.Bool.Serialize(value.Multiline);
            json["not_empty"] = JsonSerializer.Bool.Serialize(value.NotEmpty);
            if (value.Source != null)
                json["source"] = JsonSerializer.String.Serialize(value.Source);
            return json;
        }

        public StringDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new StringDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, StringDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            Json.ImmutableJson jsonDefault;
            if (json.TryGetValue("default", out jsonDefault) && !jsonDefault.IsNull)
                value.Default = JsonSerializer.String.Deserialize(jsonDefault);
            Json.ImmutableJson jsonMultiline;
            if (json.TryGetValue("multiline", out jsonMultiline) && !jsonMultiline.IsNull)
                value.Multiline = JsonSerializer.Bool.Deserialize(jsonMultiline);
            Json.ImmutableJson jsonNotEmpty;
            if (json.TryGetValue("not_empty", out jsonNotEmpty) && !jsonNotEmpty.IsNull)
                value.NotEmpty = JsonSerializer.Bool.Deserialize(jsonNotEmpty);
            Json.ImmutableJson jsonSource;
            if (json.TryGetValue("source", out jsonSource) && !jsonSource.IsNull)
                value.Source = JsonSerializer.String.Deserialize(jsonSource);
        }
    }

    public sealed class BinaryDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Binary; }
        }

        public BinaryDescriptor()
            : base()
        {
        }

        public BinaryDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
        }
    }

    public sealed class BinaryDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<BinaryDescriptor>
    {
        public static readonly BinaryDescriptorJsonSerializer Instance = new BinaryDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(BinaryDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            return json;
        }

        public BinaryDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new BinaryDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, BinaryDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
        }
    }

    public sealed class ListDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.List; }
        }

        public Descriptor Element { get; set; }

        public ListDescriptor()
            : base()
        {
        }

        public ListDescriptor(bool optional, ViewMode mode, string help, string editorKey, Descriptor element)
        {
            if (element == null)
                throw new System.ArgumentNullException("element");
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Element = element;
        }
    }

    public sealed class ListDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<ListDescriptor>
    {
        public static readonly ListDescriptorJsonSerializer Instance = new ListDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(ListDescriptor value)
        {
            if (value.Element == null)
                throw new System.InvalidOperationException("Required property Element is null");
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["element"] = DescriptorJsonSerializer.Instance.Serialize(value.Element);
            return json;
        }

        public ListDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new ListDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ListDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Element = DescriptorJsonSerializer.Instance.Deserialize(json["element"]);
        }
    }

    public sealed class DictDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Dict; }
        }

        public Descriptor Key { get; set; }
        public Descriptor Value { get; set; }

        public DictDescriptor()
            : base()
        {
        }

        public DictDescriptor(bool optional, ViewMode mode, string help, string editorKey, Descriptor key, Descriptor value)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");
            if (value == null)
                throw new System.ArgumentNullException("value");
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Key = key;
            this.Value = value;
        }
    }

    public sealed class DictDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<DictDescriptor>
    {
        public static readonly DictDescriptorJsonSerializer Instance = new DictDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(DictDescriptor value)
        {
            if (value.Key == null)
                throw new System.InvalidOperationException("Required property Key is null");
            if (value.Value == null)
                throw new System.InvalidOperationException("Required property Value is null");
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["key"] = DescriptorJsonSerializer.Instance.Serialize(value.Key);
            json["value"] = DescriptorJsonSerializer.Instance.Serialize(value.Value);
            return json;
        }

        public DictDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new DictDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, DictDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Key = DescriptorJsonSerializer.Instance.Deserialize(json["key"]);
            value.Value = DescriptorJsonSerializer.Instance.Deserialize(json["value"]);
        }
    }

    public sealed class EnumDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Enum; }
        }

        public string Name { get; set; }
        public string Default { get; set; }

        public EnumDescriptor()
            : base()
        {
        }

        public EnumDescriptor(bool optional, ViewMode mode, string help, string editorKey, string name, string @default = null)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Name = name;
            this.Default = @default;
        }
    }

    public sealed class EnumDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<EnumDescriptor>
    {
        public static readonly EnumDescriptorJsonSerializer Instance = new EnumDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(EnumDescriptor value)
        {
            if (value.Name == null)
                throw new System.InvalidOperationException("Required property Name is null");

            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            if (value.Default != null)
                json["default"] = JsonSerializer.String.Serialize(value.Default);
            return json;
        }

        public EnumDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new EnumDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, EnumDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
            Json.ImmutableJson jsonDefault;
            if (json.TryGetValue("default", out jsonDefault) && !jsonDefault.IsNull)
                value.Default = JsonSerializer.String.Deserialize(jsonDefault);
        }
    }

    public sealed class RecordDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Record; }
        }

        public string Name { get; set; }

        public RecordDescriptor()
            : base()
        {
        }

        public RecordDescriptor(bool optional, ViewMode mode, string help, string editorKey, string name)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Name = name;
        }
    }

    public sealed class RecordDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<RecordDescriptor>
    {
        public static readonly RecordDescriptorJsonSerializer Instance = new RecordDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(RecordDescriptor value)
        {
            if (value.Name == null)
                throw new System.InvalidOperationException("Required property Name is null");
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            return json;
        }

        public RecordDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new RecordDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, RecordDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
        }
    }

    public sealed class KeyDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Key; }
        }

        public string Category { get; set; }
        public string Interface { get; set; }

        public KeyDescriptor()
            : base()
        {
        }

        public KeyDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null, string category = null, string @interface = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Category = category;
            this.Interface = @interface;
        }
    }

    public sealed class KeyDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<KeyDescriptor>
    {
        public static readonly KeyDescriptorJsonSerializer Instance = new KeyDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(KeyDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            if (value.Category != null)
                json["category"] = JsonSerializer.String.Serialize(value.Category);
            if (value.Interface != null)
                json["interface"] = JsonSerializer.String.Serialize(value.Interface);
            return json;
        }

        public KeyDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new KeyDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, KeyDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            Json.ImmutableJson jsonCategory;
            if (json.TryGetValue("category", out jsonCategory) && !jsonCategory.IsNull)
                value.Category = JsonSerializer.String.Deserialize(jsonCategory);
            Json.ImmutableJson jsonInterface;
            if (json.TryGetValue("interface", out jsonInterface) && !jsonInterface.IsNull)
                value.Interface = JsonSerializer.String.Deserialize(jsonInterface);
        }
    }

    public sealed class LocalizedDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Localized; }
        }

        public string Name { get; set; }
        public bool Multiline { get; set; }

        public LocalizedDescriptor()
            : base()
        {
            Multiline = false;
        }

        public LocalizedDescriptor(bool optional, ViewMode mode, string help, string editorKey, string name, bool multiline = false)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Name = name;
            this.Multiline = multiline;
        }
    }

    public sealed class LocalizedDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<LocalizedDescriptor>
    {
        public static readonly LocalizedDescriptorJsonSerializer Instance = new LocalizedDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(LocalizedDescriptor value)
        {
            if (value.Name == null)
                throw new System.InvalidOperationException("Required property Name is null");

            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            json["multiline"] = JsonSerializer.Bool.Serialize(value.Multiline);
            return json;
        }

        public LocalizedDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new LocalizedDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, LocalizedDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
            Json.ImmutableJson jsonMultiline;
            if (json.TryGetValue("multiline", out jsonMultiline) && !jsonMultiline.IsNull)
                value.Multiline = JsonSerializer.Bool.Deserialize(jsonMultiline);
        }
    }

    public sealed class DateTimeDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Datetime; }
        }

        public DateTimeDescriptor()
            : base()
        {
        }

        public DateTimeDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
        }
    }

    public sealed class DateTimeDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<DateTimeDescriptor>
    {
        public static readonly DateTimeDescriptorJsonSerializer Instance = new DateTimeDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(DateTimeDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            return json;
        }

        public DateTimeDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new DateTimeDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, DateTimeDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
        }
    }

    public sealed class JsonDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Json; }
        }

        public JsonDescriptor()
            : base()
        {
        }

        public JsonDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
        }
    }

    public sealed class JsonDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<JsonDescriptor>
    {
        public static readonly JsonDescriptorJsonSerializer Instance = new JsonDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(JsonDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            return json;
        }

        public JsonDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new JsonDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, JsonDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
        }
    }

    public sealed class CustomDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.Custom; }
        }

        public CustomDescriptor()
            : base()
        {
        }

        public CustomDescriptor(bool optional = false, ViewMode mode = ViewMode.Edit, string help = null, string editorKey = null)
        {
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
        }
    }

    public sealed class CustomDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<CustomDescriptor>
    {
        public static readonly CustomDescriptorJsonSerializer Instance = new CustomDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(CustomDescriptor value)
        {
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            return json;
        }

        public CustomDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new CustomDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, CustomDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
        }
    }

    public sealed class GenericInstanceDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.GenericInstance; }
        }

        public string Prototype { get; set; }
        public List<Descriptor> Arguments { get; set; }

        public GenericInstanceDescriptor()
            : base()
        {
        }

        public GenericInstanceDescriptor(bool optional, ViewMode mode, string help, string editorKey, string prototype, List<Descriptor> arguments)
        {
            if (prototype == null)
                throw new System.ArgumentNullException("prototype");
            if (arguments == null)
                throw new System.ArgumentNullException("arguments");
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Prototype = prototype;
            this.Arguments = arguments;
        }
    }

    public sealed class GenericInstanceDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<GenericInstanceDescriptor>
    {
        public static readonly GenericInstanceDescriptorJsonSerializer Instance = new GenericInstanceDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(GenericInstanceDescriptor value)
        {
            if (value.Prototype == null)
                throw new System.InvalidOperationException("Required property Prototype is null");
            if (value.Arguments == null)
                throw new System.InvalidOperationException("Required property Arguments is null");
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["prototype"] = JsonSerializer.String.Serialize(value.Prototype);
            json["arguments"] = JsonSerializer.List(DescriptorJsonSerializer.Instance).Serialize(value.Arguments);
            return json;
        }

        public GenericInstanceDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new GenericInstanceDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GenericInstanceDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Prototype = JsonSerializer.String.Deserialize(json["prototype"]);
            value.Arguments = JsonSerializer.List(DescriptorJsonSerializer.Instance).Deserialize(json["arguments"]);
        }
    }

    public sealed class GenericArgumentDescriptor : Descriptor
    {
        public override DescriptorKind Kind
        {
            get { return DescriptorKind.GenericArgument; }
        }

        public string Name { get; set; }

        public GenericArgumentDescriptor()
            : base()
        {
        }

        public GenericArgumentDescriptor(bool optional, ViewMode mode, string help, string editorKey, string name)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
            this.Optional = optional;
            this.Mode = mode;
            this.Help = help;
            this.EditorKey = editorKey;
            this.Name = name;
        }
    }

    public sealed class GenericArgumentDescriptorJsonSerializer : Json.Serialization.IJsonSerializer<GenericArgumentDescriptor>
    {
        public static readonly GenericArgumentDescriptorJsonSerializer Instance = new GenericArgumentDescriptorJsonSerializer();

        public Json.ImmutableJson Serialize(GenericArgumentDescriptor value)
        {
            if (value.Name == null)
                throw new System.InvalidOperationException("Required property Name is null");
            var json = new Json.JsonObject();
            json["kind"] = DescriptorKindJsonSerializer.Instance.Serialize(value.Kind);
            json["optional"] = JsonSerializer.Bool.Serialize(value.Optional);
            json["mode"] = ViewModeJsonSerializer.Instance.Serialize(value.Mode);
            if (value.Help != null)
                json["help"] = JsonSerializer.String.Serialize(value.Help);
            if (value.EditorKey != null)
                json["editor_key"] = JsonSerializer.String.Serialize(value.EditorKey);
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            return json;
        }

        public GenericArgumentDescriptor Deserialize(Json.ImmutableJson json)
        {
            var result = new GenericArgumentDescriptor();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GenericArgumentDescriptor value)
        {
            Json.ImmutableJson jsonOptional;
            if (json.TryGetValue("optional", out jsonOptional) && !jsonOptional.IsNull)
                value.Optional = JsonSerializer.Bool.Deserialize(jsonOptional);
            Json.ImmutableJson jsonMode;
            if (json.TryGetValue("mode", out jsonMode) && !jsonMode.IsNull)
                value.Mode = ViewModeJsonSerializer.Instance.Deserialize(jsonMode);
            Json.ImmutableJson jsonHelp;
            if (json.TryGetValue("help", out jsonHelp) && !jsonHelp.IsNull)
                value.Help = JsonSerializer.String.Deserialize(jsonHelp);
            Json.ImmutableJson jsonEditorKey;
            if (json.TryGetValue("editor_key", out jsonEditorKey) && !jsonEditorKey.IsNull)
                value.EditorKey = JsonSerializer.String.Deserialize(jsonEditorKey);
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
        }
    }

    public sealed class CustomTypeKindJsonSerializer : Json.Serialization.IJsonSerializer<CustomTypeKind>, Json.Serialization.IJsonKeySerializer<CustomTypeKind>
    {
        public static readonly CustomTypeKindJsonSerializer Instance = new CustomTypeKindJsonSerializer();

        public Json.ImmutableJson Serialize(CustomTypeKind value)
        {
            return SerializeKey(value);
        }

        public CustomTypeKind Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(CustomTypeKind value)
        {
            switch (value)
            {
                case CustomTypeKind.Record: return "record";
                case CustomTypeKind.Variant: return "variant";
                case CustomTypeKind.Enum: return "enum";
                default: throw new System.ArgumentException("value");
            }
        }

        public CustomTypeKind DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "record": return CustomTypeKind.Record;
                case "variant": return CustomTypeKind.Variant;
                case "enum": return CustomTypeKind.Enum;
                default: throw new System.ArgumentException("jsonKey");
            }
        }
    }

    public abstract class CustomType
    {
        public abstract CustomTypeKind Kind { get; }

        protected CustomType()
        {
        }
    }

    public sealed class CustomTypeJsonSerializer : Json.Serialization.IJsonSerializer<CustomType>
    {
        public static readonly CustomTypeJsonSerializer Instance = new CustomTypeJsonSerializer();

        public Json.ImmutableJson Serialize(CustomType value)
        {
            switch (value.Kind)
            {
                case CustomTypeKind.Record:
                    return RecordCustomTypeJsonSerializer.Instance.Serialize((RecordCustomType)value);
                case CustomTypeKind.Variant:
                    return VariantCustomTypeJsonSerializer.Instance.Serialize((VariantCustomType)value);
                case CustomTypeKind.Enum:
                    return EnumCustomTypeJsonSerializer.Instance.Serialize((EnumCustomType)value);

                default:
                    throw new System.ArgumentOutOfRangeException("kind", value.Kind, "Invalid variant tag");
            }
        }

        public CustomType Deserialize(Json.ImmutableJson json)
        {
            CustomTypeKind kind = CustomTypeKindJsonSerializer.Instance.Deserialize(json["kind"]);
            switch (kind)
            {
                case CustomTypeKind.Record:
                    return RecordCustomTypeJsonSerializer.Instance.Deserialize(json);
                case CustomTypeKind.Variant:
                    return VariantCustomTypeJsonSerializer.Instance.Deserialize(json);
                case CustomTypeKind.Enum:
                    return EnumCustomTypeJsonSerializer.Instance.Deserialize(json);

                default:
                    throw new System.ArgumentOutOfRangeException("kind", kind, "Invalid variant tag");
            }
        }
    }

    public abstract class StructCustomType : CustomType
    {
        public Dictionary<string, Descriptor> Fields { get; set; }
        public string Parent { get; set; }
        public List<string> Interfaces { get; set; }

        protected StructCustomType()
            : base()
        {
        }
    }

    public sealed class StructCustomTypeJsonSerializer : Json.Serialization.IJsonSerializer<StructCustomType>
    {
        public static readonly StructCustomTypeJsonSerializer Instance = new StructCustomTypeJsonSerializer();

        public Json.ImmutableJson Serialize(StructCustomType value)
        {
            switch (value.Kind)
            {
                case CustomTypeKind.Record:
                    return RecordCustomTypeJsonSerializer.Instance.Serialize((RecordCustomType)value);
                case CustomTypeKind.Variant:
                    return VariantCustomTypeJsonSerializer.Instance.Serialize((VariantCustomType)value);

                default:
                    throw new System.ArgumentOutOfRangeException("kind", value.Kind, "Invalid variant tag");
            }
        }

        public StructCustomType Deserialize(Json.ImmutableJson json)
        {
            CustomTypeKind kind = CustomTypeKindJsonSerializer.Instance.Deserialize(json["kind"]);
            switch (kind)
            {
                case CustomTypeKind.Record:
                    return RecordCustomTypeJsonSerializer.Instance.Deserialize(json);
                case CustomTypeKind.Variant:
                    return VariantCustomTypeJsonSerializer.Instance.Deserialize(json);

                default:
                    throw new System.ArgumentOutOfRangeException("kind", kind, "Invalid variant tag");
            }
        }
    }

    public sealed class RecordCustomType : StructCustomType
    {
        public override CustomTypeKind Kind
        {
            get { return CustomTypeKind.Record; }
        }

        public List<string> GenericArguments { get; set; }

        public RecordCustomType()
            : base()
        {
        }

        public RecordCustomType(Dictionary<string, Descriptor> fields, string parent, List<string> interfaces, List<string> genericArguments = null)
        {
            if (fields == null)
                throw new System.ArgumentNullException("fields");

            if (interfaces == null)
                throw new System.ArgumentNullException("interfaces");

            this.Fields = fields;
            this.Parent = parent;
            this.Interfaces = interfaces;
            this.GenericArguments = genericArguments;
        }
    }

    public sealed class RecordCustomTypeJsonSerializer : Json.Serialization.IJsonSerializer<RecordCustomType>
    {
        public static readonly RecordCustomTypeJsonSerializer Instance = new RecordCustomTypeJsonSerializer();

        public Json.ImmutableJson Serialize(RecordCustomType value)
        {
            if (value.Fields == null)
                throw new System.InvalidOperationException("Required property Fields is null");

            if (value.Interfaces == null)
                throw new System.InvalidOperationException("Required property Interfaces is null");

            var json = new Json.JsonObject();
            json["kind"] = CustomTypeKindJsonSerializer.Instance.Serialize(value.Kind);
            json["fields"] = JsonSerializer.Dict(JsonSerializer.String, DescriptorJsonSerializer.Instance).Serialize(value.Fields);
            if (value.Parent != null)
                json["parent"] = JsonSerializer.String.Serialize(value.Parent);
            json["interfaces"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.Interfaces);
            if (value.GenericArguments != null)
                json["generic_arguments"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.GenericArguments);
            return json;
        }

        public RecordCustomType Deserialize(Json.ImmutableJson json)
        {
            var result = new RecordCustomType();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, RecordCustomType value)
        {
            value.Fields = JsonSerializer.Dict(JsonSerializer.String, DescriptorJsonSerializer.Instance).Deserialize(json["fields"]);
            Json.ImmutableJson jsonParent;
            if (json.TryGetValue("parent", out jsonParent) && !jsonParent.IsNull)
                value.Parent = JsonSerializer.String.Deserialize(jsonParent);
            value.Interfaces = JsonSerializer.List(JsonSerializer.String).Deserialize(json["interfaces"]);
            Json.ImmutableJson jsonGenericArguments;
            if (json.TryGetValue("generic_arguments", out jsonGenericArguments) && !jsonGenericArguments.IsNull)
                value.GenericArguments = JsonSerializer.List(JsonSerializer.String).Deserialize(jsonGenericArguments);
        }
    }

    public sealed class VariantCustomType : StructCustomType
    {
        public override CustomTypeKind Kind
        {
            get { return CustomTypeKind.Variant; }
        }

        public string Tag { get; set; }
        public Dictionary<string, string> Children { get; set; }

        public VariantCustomType()
            : base()
        {
        }

        public VariantCustomType(Dictionary<string, Descriptor> fields, string parent, List<string> interfaces, string tag, Dictionary<string, string> children)
        {
            if (fields == null)
                throw new System.ArgumentNullException("fields");

            if (interfaces == null)
                throw new System.ArgumentNullException("interfaces");
            if (tag == null)
                throw new System.ArgumentNullException("tag");
            if (children == null)
                throw new System.ArgumentNullException("children");
            this.Fields = fields;
            this.Parent = parent;
            this.Interfaces = interfaces;
            this.Tag = tag;
            this.Children = children;
        }
    }

    public sealed class VariantCustomTypeJsonSerializer : Json.Serialization.IJsonSerializer<VariantCustomType>
    {
        public static readonly VariantCustomTypeJsonSerializer Instance = new VariantCustomTypeJsonSerializer();

        public Json.ImmutableJson Serialize(VariantCustomType value)
        {
            if (value.Fields == null)
                throw new System.InvalidOperationException("Required property Fields is null");

            if (value.Interfaces == null)
                throw new System.InvalidOperationException("Required property Interfaces is null");
            if (value.Tag == null)
                throw new System.InvalidOperationException("Required property Tag is null");
            if (value.Children == null)
                throw new System.InvalidOperationException("Required property Children is null");
            var json = new Json.JsonObject();
            json["kind"] = CustomTypeKindJsonSerializer.Instance.Serialize(value.Kind);
            json["fields"] = JsonSerializer.Dict(JsonSerializer.String, DescriptorJsonSerializer.Instance).Serialize(value.Fields);
            if (value.Parent != null)
                json["parent"] = JsonSerializer.String.Serialize(value.Parent);
            json["interfaces"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.Interfaces);
            json["tag"] = JsonSerializer.String.Serialize(value.Tag);
            json["children"] = JsonSerializer.Dict(JsonSerializer.String, JsonSerializer.String).Serialize(value.Children);
            return json;
        }

        public VariantCustomType Deserialize(Json.ImmutableJson json)
        {
            var result = new VariantCustomType();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, VariantCustomType value)
        {
            value.Fields = JsonSerializer.Dict(JsonSerializer.String, DescriptorJsonSerializer.Instance).Deserialize(json["fields"]);
            Json.ImmutableJson jsonParent;
            if (json.TryGetValue("parent", out jsonParent) && !jsonParent.IsNull)
                value.Parent = JsonSerializer.String.Deserialize(jsonParent);
            value.Interfaces = JsonSerializer.List(JsonSerializer.String).Deserialize(json["interfaces"]);
            value.Tag = JsonSerializer.String.Deserialize(json["tag"]);
            value.Children = JsonSerializer.Dict(JsonSerializer.String, JsonSerializer.String).Deserialize(json["children"]);
        }
    }

    public sealed class EnumCustomType : CustomType
    {
        public override CustomTypeKind Kind
        {
            get { return CustomTypeKind.Enum; }
        }

        public List<string> Values { get; set; }

        public EnumCustomType()
            : base()
        {
        }

        public EnumCustomType(List<string> values)
        {
            if (values == null)
                throw new System.ArgumentNullException("values");
            this.Values = values;
        }
    }

    public sealed class EnumCustomTypeJsonSerializer : Json.Serialization.IJsonSerializer<EnumCustomType>
    {
        public static readonly EnumCustomTypeJsonSerializer Instance = new EnumCustomTypeJsonSerializer();

        public Json.ImmutableJson Serialize(EnumCustomType value)
        {
            if (value.Values == null)
                throw new System.InvalidOperationException("Required property Values is null");
            var json = new Json.JsonObject();
            json["kind"] = CustomTypeKindJsonSerializer.Instance.Serialize(value.Kind);
            json["values"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.Values);
            return json;
        }

        public EnumCustomType Deserialize(Json.ImmutableJson json)
        {
            var result = new EnumCustomType();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, EnumCustomType value)
        {
            value.Values = JsonSerializer.List(JsonSerializer.String).Deserialize(json["values"]);
        }
    }

    public sealed class Schema
    {
        public Dictionary<string, CustomType> CustomTypes { get; set; }
        public string DocumentType { get; set; }

        public Schema()
        {
        }
    }

    public sealed class SchemaJsonSerializer : Json.Serialization.IJsonSerializer<Schema>
    {
        public static readonly SchemaJsonSerializer Instance = new SchemaJsonSerializer();

        public Json.ImmutableJson Serialize(Schema value)
        {
            if (value.CustomTypes == null)
                throw new System.InvalidOperationException("Required property CustomTypes is null");
            if (value.DocumentType == null)
                throw new System.InvalidOperationException("Required property DocumentType is null");
            var json = new Json.JsonObject();
            json["custom_types"] = JsonSerializer.Dict(JsonSerializer.String, CustomTypeJsonSerializer.Instance).Serialize(value.CustomTypes);
            json["document_type"] = JsonSerializer.String.Serialize(value.DocumentType);
            return json;
        }

        public Schema Deserialize(Json.ImmutableJson json)
        {
            var result = new Schema();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, Schema value)
        {
            value.CustomTypes = JsonSerializer.Dict(JsonSerializer.String, CustomTypeJsonSerializer.Instance).Deserialize(json["custom_types"]);
            value.DocumentType = JsonSerializer.String.Deserialize(json["document_type"]);
        }
    }
}
